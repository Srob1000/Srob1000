{"version":3,"sources":["Water.js","Sun.js","App.js","serviceWorker.js","index.js"],"names":["Water","class","TxtRotate","el","toRotate","period","this","loopNum","parseInt","txt","tick","isDeleting","prototype","i","length","fullTxt","substring","innerHTML","that","delta","Math","random","setTimeout","window","onload","elements","document","getElementsByClassName","getAttribute","JSON","parse","css","createElement","type","body","appendChild","Sun","data-period","data-rotate","href","target","rel","App","state","total","next","operation","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAWeA,MAPf,WACE,OACA,yBAAKC,MAAM,oBCHTC,G,MAAY,SAASC,EAAIC,EAAUC,GACrCC,KAAKF,SAAWA,EAChBE,KAAKH,GAAKA,EACVG,KAAKC,QAAU,EACfD,KAAKD,OAASG,SAASH,EAAQ,KAAO,IACtCC,KAAKG,IAAM,GACXH,KAAKI,OACLJ,KAAKK,YAAa,IAGpBT,EAAUU,UAAUF,KAAO,WACzB,IAAIG,EAAIP,KAAKC,QAAUD,KAAKF,SAASU,OACjCC,EAAUT,KAAKF,SAASS,GAExBP,KAAKK,WACPL,KAAKG,IAAMM,EAAQC,UAAU,EAAGV,KAAKG,IAAIK,OAAS,GAElDR,KAAKG,IAAMM,EAAQC,UAAU,EAAGV,KAAKG,IAAIK,OAAS,GAGpDR,KAAKH,GAAGc,UAAY,uBAAuBX,KAAKG,IAAI,UAEpD,IAAIS,EAAOZ,KACPa,EAAQ,IAAsB,IAAhBC,KAAKC,SAEnBf,KAAKK,aAAcQ,GAAS,GAE3Bb,KAAKK,YAAcL,KAAKG,MAAQM,EAG1BT,KAAKK,YAA2B,KAAbL,KAAKG,MACjCH,KAAKK,YAAa,EAClBL,KAAKC,UACLY,EAAQ,MALRA,EAAQb,KAAKD,OACbC,KAAKK,YAAa,GAOpBW,YAAW,WACTJ,EAAKR,SACJS,IAGLI,OAAOC,OAAS,WAEd,IADA,IAAIC,EAAWC,SAASC,uBAAuB,cACtCd,EAAE,EAAGA,EAAEY,EAASX,OAAQD,IAAK,CACpC,IAAIT,EAAWqB,EAASZ,GAAGe,aAAa,eACpCvB,EAASoB,EAASZ,GAAGe,aAAa,eAClCxB,GACF,IAAIF,EAAUuB,EAASZ,GAAIgB,KAAKC,MAAM1B,GAAWC,GAIrD,IAAI0B,EAAML,SAASM,cAAc,SACjCD,EAAIE,KAAO,WACXF,EAAId,UAAY,uBAChBS,SAASQ,KAAKC,YAAYJ,IAiCbK,MA9Bf,WACE,OACE,yBAAKnC,MAAM,gBACT,yBAAKA,MAAM,aACX,yBAAKA,MAAM,WACX,yBAAKA,MAAM,WAAX,0BAA4C,0BAC5CA,MAAM,aACNoC,cAAY,OACZC,cAAY,0FACZ,yBAAKrC,MAAM,YACX,uBAAGA,MAAM,WACTsC,KAAK,mEACLC,OAAO,SACPC,IAAI,uBAHJ,QAKA,uBAAGxC,MAAM,WACTsC,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAHJ,WAKA,uBAAGxC,MAAM,WACTsC,KAAK,uCACLC,OAAO,SACPC,IAAI,uBAHJ,eC1EeC,G,kNACnBC,MAAQ,CACNC,MAAO,KACPC,KAAM,KACNC,UAAW,M,uDAKX,OACE,0BAAM7C,MAAM,OACV,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZyB8C,IAAMC,YCMnBC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20cf70be.chunk.js","sourcesContent":["import React from 'react';\nimport './Water.css';\n\n\nfunction Water() {\n  return (\n  <div class=\"waterContainer\">\n  </div>\n  );\n}\n\nexport default Water;","import React from 'react';\nimport './Sun.css';\n\nvar TxtRotate = function(el, toRotate, period) {\n  this.toRotate = toRotate;\n  this.el = el;\n  this.loopNum = 0;\n  this.period = parseInt(period, 12) || 2000;\n  this.txt = '';\n  this.tick();\n  this.isDeleting = false;\n};\n\nTxtRotate.prototype.tick = function() {\n  var i = this.loopNum % this.toRotate.length;\n  var fullTxt = this.toRotate[i];\n\n  if (this.isDeleting) {\n    this.txt = fullTxt.substring(0, this.txt.length - 1);\n  } else {\n    this.txt = fullTxt.substring(0, this.txt.length + 1);\n  }\n\n  this.el.innerHTML = ' <span class=\"wrap\">'+this.txt+'</span>';\n\n  var that = this;\n  var delta = 210 - Math.random() * 100;\n\n  if (this.isDeleting) { delta /= 2; }\n\n  if (!this.isDeleting && this.txt === fullTxt) {\n    delta = this.period;\n    this.isDeleting = true;\n  } else if (this.isDeleting && this.txt === '') {\n    this.isDeleting = false;\n    this.loopNum++;\n    delta = 500;\n  }\n\n  setTimeout(function() {\n    that.tick();\n  }, delta);\n};\n\nwindow.onload = function() {\n  var elements = document.getElementsByClassName('txt-rotate');\n  for (var i=0; i<elements.length; i++) {\n    var toRotate = elements[i].getAttribute('data-rotate');\n    var period = elements[i].getAttribute('data-period');\n    if (toRotate) {\n      new TxtRotate(elements[i], JSON.parse(toRotate), period);\n    }\n  }\n  \n  var css = document.createElement(\"style\");\n  css.type = \"text/css\";\n  css.innerHTML = \".txt-rotate > .wrap \";\n  document.body.appendChild(css);\n};\n\nfunction Sun() {\n  return (\n    <div class=\"sunContainer\">\n      <div class=\"sunShape\"></div>\n      <div class=\"sunAllt\">\n      <div class=\"sunText\">A product designer who <span\n      class=\"txt-rotate\"\n      data-period=\"2000\"\n      data-rotate='[ \"empathizes.\", \"is humble.\", \"simplifies.\", \"is curious.\", \"codes.\", \"is driven.\"]'></span></div>\n      <div class=\"sunLinks\">\n      <a class=\"sunLink1\"\n      href=\"https://medium.com/@shawnjr/personal-design-archive-61e30379f54f\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >Work</a>\n      <a class=\"sunLink2\"\n      href=\"https://medium.com/@shawnjr\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >Writing</a>\n      <a class=\"sunLink3\"\n      href=\"https://www.linkedin.com/in/shawnjr/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">Contact</a>\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Sun;","import React from 'react';\nimport './App.css';\nimport Water from './Water.js';\nimport Sun from './Sun.js';\nimport './Sky.css';\n\nexport default class App extends React.Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n  };\n  \n\nrender() {\n    return (\n      <body class=\"sky\">\n        <Sun></Sun>\n        <Water></Water>\n      </body>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}